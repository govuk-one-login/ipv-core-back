import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
	id "java"
	id "idea"
	id "org.sonarqube"
	id "jacoco"
	id "com.diffplug.spotless"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "com.amazonaws:aws-java-sdk-dynamodb:$rootProject.ext.dependencyVersions.awsJavaSdkDynamodb",
			"com.amazonaws:aws-lambda-java-core:$rootProject.ext.dependencyVersions.awsLambdaJavaCore",
			"com.amazonaws:aws-lambda-java-events:$rootProject.ext.dependencyVersions.awsLambdaJavaEvents",
			"com.google.code.gson:gson:$rootProject.ext.dependencyVersions.gson",
			"com.nimbusds:oauth2-oidc-sdk:$rootProject.ext.dependencyVersions.nimbusdsOauth2OidcSdk",
			"org.apache.logging.log4j:log4j-api:$rootProject.ext.dependencyVersions.log4j",
			"org.apache.logging.log4j:log4j-core:$rootProject.ext.dependencyVersions.log4j",
			"software.amazon.awssdk:dynamodb-enhanced:$rootProject.ext.dependencyVersions.dynamodbEnhanced",
			"software.amazon.lambda:powertools-parameters:$rootProject.ext.dependencyVersions.powertoolsParameters",
			project(":lib")

	testImplementation "com.github.tomakehurst:wiremock-jre8:2.35.0",
			"org.junit.jupiter:junit-jupiter:5.8.2",
			"org.mockito:mockito-core:5.3.1",
			"org.mockito:mockito-junit-jupiter:4.2.0",
			"uk.org.webcompere:system-stubs-jupiter:2.0.2",
			"com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.0"
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

test {
	useJUnitPlatform ()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
	}
}

sourceSets {
	integrationTest {
		java {
			srcDir 'src/integration-test/java'
		}
		resources {
			srcDir 'src/integration-test/resources'
		}
		runtimeClasspath += sourceSets.main.runtimeClasspath
		runtimeClasspath += sourceSets.test.runtimeClasspath
		compileClasspath += sourceSets.main.compileClasspath
		compileClasspath += sourceSets.test.compileClasspath
	}
}

task intTest(type: Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath += sourceSets.integrationTest.runtimeClasspath
	reports.junitXml.getOutputLocation().set(file("${project.buildDir}/int-test-results"))
	reports.html.getOutputLocation().set(file("${project.buildDir}/int-test-reports"))
	include 'uk/gov/di/ipv/core/integrationtest/**'
}

tasks.withType(Test) {
	testLogging {
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED

		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		afterSuite { suite, result ->
			if (!suite.parent) {
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}
