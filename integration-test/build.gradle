import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
	id "java"
	id "idea"
	id "org.sonarqube"
	id "jacoco"
	id "com.diffplug.spotless"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation platform(libs.awsSdkBom),
			libs.awsJavaSdkDynamodb,
			libs.awsJavaSdkDynamodbEnhanced,
			libs.awsLambdaJavaCore,
			libs.awsLambdaJavaEvents,
			libs.awsJavaSdkUrlConnectionClient,
			libs.bundles.log4j,
			libs.gson,
			libs.nimbusdsOauth2OidcSdk,
			libs.powertoolsParameters,
			project(":libs:common-services")

	testImplementation libs.wiremock,
			libs.junitJupiter,
			libs.mockitoCore,
			libs.mockitoJunit,
			libs.systemStubs,
			libs.jacksonDatatypeJsr
	testRuntimeOnly libs.junitPlatform
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

test {
	useJUnitPlatform ()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
	}
}

sourceSets {
	integrationTest {
		java {
			srcDir 'src/integration-test/java'
		}
		resources {
			srcDir 'src/integration-test/resources'
		}
		runtimeClasspath += sourceSets.main.runtimeClasspath
		runtimeClasspath += sourceSets.test.runtimeClasspath
		compileClasspath += sourceSets.main.compileClasspath
		compileClasspath += sourceSets.test.compileClasspath
	}
}

task intTest(type: Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	reports.junitXml.getOutputLocation().set(file("${project.buildDir}/int-test-results"))
	reports.html.getOutputLocation().set(file("${project.buildDir}/int-test-reports"))
	include 'uk/gov/di/ipv/core/integrationtest/**'
}

tasks.withType(Test) {
	testLogging {
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED

		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		afterSuite { suite, result ->
			if (!suite.parent) {
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}
