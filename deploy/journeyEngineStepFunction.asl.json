{
  "StartAt": "ProcessJourneyStep",
  "States": {
    "ProcessJourneyStep": {
      "Type": "Task",
      "Resource": "${IPVProcessJourneyEventFunctionArn}",
      "Parameters": {
        "headers": {
          "traceparent.$": "$$.Execution.Input.traceParent",
          "tracestate.$": "$$.Execution.Input.traceState",
          "x-dynatrace.$": "$$.Execution.Input.dynatrace"
        },
        "body.$": "States.JsonToString(States.JsonMerge($$.Execution.Input, $, false))"
      },
      "Next": "ProcessJourneyStepResult",
      "Retry": [{
        "ErrorEquals": ["Lambda.SnapStartNotReadyException"],
        "IntervalSeconds": 1,
        "BackoffRate": 2,
        "MaxAttempts": 5,
        "MaxDelaySeconds": 4
      }]
    },
    "ProcessJourneyStepResult": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.journey",
          "IsPresent": false,
          "Next": "Success"
        },
        {
          "Variable": "$.journey",
          "StringMatches": "/journey/check-existing-identity",
          "Next": "CheckExistingIdentityLambda"
        },
        {
          "Variable": "$.journey",
          "StringMatches": "/journey/reset-session-identity",
          "Next": "ResetSessionIdentityLambda"
        },
        {
          "Variable": "$.journey",
          "StringMatches": "/journey/cri/build-oauth-request/*",
          "Next": "BuildCriOauthRequestLambda"
        },
        {
          "Variable": "$.journey",
          "StringMatches": "/journey/build-client-oauth-response",
          "Next": "BuildClientOauthResponseLambda"
        },
        {
          "Variable": "$.journey",
          "StringMatches": "/journey/check-gpg45-score",
          "Next": "CheckGpg45ScoreLambda"
        },
        {
          "Variable": "$.journey",
          "StringMatches": "/journey/evaluate-gpg45-scores",
          "Next": "EvaluateGpg45Scores"
        },
        {
          "Variable": "$.journey",
          "StringMatches": "/journey/call-ticf-cri",
          "Next": "CallTicfCriLambda"
        },
        {
          "Variable": "$.journey",
          "StringMatches": "/journey/store-identity",
          "Next": "StoreIdentityLambda"
        },
        {
          "Variable": "$.journey",
          "StringMatches": "/journey/check-coi",
          "Next": "CheckCoiLambda"
        },
        {
          "Variable": "$.journey",
          "StringMatches": "/journey/call-dcmaw-async-cri",
          "Next": "CallDcmawAsyncCriLambda"
        }
      ],
      "Default": "Success"
    },
    "CheckExistingIdentityLambda": {
      "Type": "Task",
      "Resource": "${CheckExistingIdentityFunctionArn}",
      "Parameters": {
        "headers": {
          "traceparent.$": "$$.Execution.Input.traceParent",
          "tracestate.$": "$$.Execution.Input.traceState",
          "x-dynatrace.$": "$$.Execution.Input.dynatrace"
        },
        "body.$": "States.JsonToString(States.JsonMerge($$.Execution.Input, $, false))"
      },
      "Next": "ProcessNextJourney",
      "Retry": [{
        "ErrorEquals": ["Lambda.SnapStartNotReadyException"],
        "IntervalSeconds": 1,
        "BackoffRate": 2,
        "MaxAttempts": 5,
        "MaxDelaySeconds": 4
      }]
    },
    "ResetSessionIdentityLambda": {
      "Type": "Task",
      "Resource": "${ResetSessionIdentityFunctionArn}",
      "Parameters": {
        "headers": {
          "traceparent.$": "$$.Execution.Input.traceParent",
          "tracestate.$": "$$.Execution.Input.traceState",
          "x-dynatrace.$": "$$.Execution.Input.dynatrace"
        },
        "body.$": "States.JsonToString(States.JsonMerge($$.Execution.Input, $, false))"
      },
      "Next": "ProcessNextJourney",
      "Retry": [{
        "ErrorEquals": ["Lambda.SnapStartNotReadyException"],
        "IntervalSeconds": 1,
        "BackoffRate": 2,
        "MaxAttempts": 5,
        "MaxDelaySeconds": 4
      }]
    },
    "BuildCriOauthRequestLambda": {
      "Type": "Task",
      "Resource": "${BuildCriOauthRequestFunctionArn}",
      "Parameters": {
        "headers": {
          "traceparent.$": "$$.Execution.Input.traceParent",
          "tracestate.$": "$$.Execution.Input.traceState",
          "x-dynatrace.$": "$$.Execution.Input.dynatrace"
        },
        "body.$": "States.JsonToString(States.JsonMerge($$.Execution.Input, $, false))"
      },
      "Next": "ProcessNextJourney",
      "Retry": [{
        "ErrorEquals": ["Lambda.SnapStartNotReadyException"],
        "IntervalSeconds": 1,
        "BackoffRate": 2,
        "MaxAttempts": 5,
        "MaxDelaySeconds": 4
      }]
    },
    "BuildClientOauthResponseLambda": {
      "Type": "Task",
      "Resource": "${BuildClientOauthResponseFunctionArn}",
      "Parameters": {
        "headers": {
          "traceparent.$": "$$.Execution.Input.traceParent",
          "tracestate.$": "$$.Execution.Input.traceState",
          "x-dynatrace.$": "$$.Execution.Input.dynatrace"
        },
        "body.$": "States.JsonToString(States.JsonMerge($$.Execution.Input, $, false))",
      },
      "Next": "ProcessNextJourney",
      "Retry": [{
        "ErrorEquals": ["Lambda.SnapStartNotReadyException"],
        "IntervalSeconds": 1,
        "BackoffRate": 2,
        "MaxAttempts": 5,
        "MaxDelaySeconds": 4
      }]
    },
    "EvaluateGpg45Scores": {
      "Type": "Task",
      "Resource": "${EvaluateGpg45ScoresFunctionArn}",
      "Parameters": {
        "headers": {
          "traceparent.$": "$$.Execution.Input.traceParent",
          "tracestate.$": "$$.Execution.Input.traceState",
          "x-dynatrace.$": "$$.Execution.Input.dynatrace"
        },
        "body.$": "States.JsonToString(States.JsonMerge($$.Execution.Input, $, false))"
      },
      "Next": "ProcessNextJourney",
      "Retry": [{
        "ErrorEquals": ["Lambda.SnapStartNotReadyException"],
        "IntervalSeconds": 1,
        "BackoffRate": 2,
        "MaxAttempts": 5,
        "MaxDelaySeconds": 4
      }]
    },
    "CheckGpg45ScoreLambda": {
      "Type": "Task",
      "Resource": "${CheckGpg45ScoreFunctionArn}",
      "Parameters": {
        "headers": {
          "traceparent.$": "$$.Execution.Input.traceParent",
          "tracestate.$": "$$.Execution.Input.traceState",
          "x-dynatrace.$": "$$.Execution.Input.dynatrace"
        },
        "body.$": "States.JsonToString(States.JsonMerge($$.Execution.Input, $, false))"
      },
      "Next": "ProcessNextJourney",
      "Retry": [{
        "ErrorEquals": ["Lambda.SnapStartNotReadyException"],
        "IntervalSeconds": 1,
        "BackoffRate": 2,
        "MaxAttempts": 5,
        "MaxDelaySeconds": 4
      }]
    },
    "CallTicfCriLambda": {
      "Type": "Task",
      "Resource": "${CallTicfCriLambdaArn}",
      "Parameters": {
        "headers": {
          "traceparent.$": "$$.Execution.Input.traceParent",
          "tracestate.$": "$$.Execution.Input.traceState",
          "x-dynatrace.$": "$$.Execution.Input.dynatrace"
        },
        "body.$": "States.JsonToString(States.JsonMerge($$.Execution.Input, $, false))"
      },
      "Next": "ProcessNextJourney",
      "Retry": [{
        "ErrorEquals": ["Lambda.SnapStartNotReadyException"],
        "IntervalSeconds": 1,
        "BackoffRate": 2,
        "MaxAttempts": 5,
        "MaxDelaySeconds": 4
      }]
    },
    "CallDcmawAsyncCriLambda": {
      "Type": "Task",
      "Resource": "${CallDcmawAsyncCriLambdaArn}",
      "Parameters": {
        "headers": {
          "traceparent.$": "$$.Execution.Input.traceParent",
          "tracestate.$": "$$.Execution.Input.traceState",
          "x-dynatrace.$": "$$.Execution.Input.dynatrace"
        },
        "body.$": "States.JsonToString(States.JsonMerge($$.Execution.Input, $, false))"
      },
      "Next": "ProcessNextJourney",
      "Retry": [{
        "ErrorEquals": ["Lambda.SnapStartNotReadyException"],
        "IntervalSeconds": 1,
        "BackoffRate": 2,
        "MaxAttempts": 5,
        "MaxDelaySeconds": 4
      }]
    },
    "StoreIdentityLambda": {
      "Type": "Task",
      "Resource": "${StoreIdentityLambdaArn}",
      "Parameters": {
        "headers": {
          "traceparent.$": "$$.Execution.Input.traceParent",
          "tracestate.$": "$$.Execution.Input.traceState",
          "x-dynatrace.$": "$$.Execution.Input.dynatrace"
        },
        "body.$": "States.JsonToString(States.JsonMerge($$.Execution.Input, $, false))"
      },
      "Next": "ProcessNextJourney",
      "Retry": [{
        "ErrorEquals": ["Lambda.SnapStartNotReadyException"],
        "IntervalSeconds": 1,
        "BackoffRate": 2,
        "MaxAttempts": 5,
        "MaxDelaySeconds": 4
      }]
    },
    "CheckCoiLambda": {
      "Type": "Task",
      "Resource": "${CheckCoiFunctionArn}",
      "Parameters": {
        "headers": {
          "traceparent.$": "$$.Execution.Input.traceParent",
          "tracestate.$": "$$.Execution.Input.traceState",
          "x-dynatrace.$": "$$.Execution.Input.dynatrace"
        },
        "body.$": "States.JsonToString(States.JsonMerge($$.Execution.Input, $, false))"
      },

      "Next": "ProcessNextJourney",
      "Retry": [{
        "ErrorEquals": ["Lambda.SnapStartNotReadyException"],
        "IntervalSeconds": 1,
        "BackoffRate": 2,
        "MaxAttempts": 5,
        "MaxDelaySeconds": 4
      }]
    },
    "ProcessNextJourney": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.journey",
          "IsPresent": false,
          "Next": "Success"
        },
        {
          "Variable": "$.journey",
          "StringMatches": "/journey/*",
          "Next": "ProcessJourneyStep"
        }
      ],
      "Default": "Success"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
