AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary serverless components for IPV Core-Back.

Globals:
  Function:
    Timeout: 40
    SnapStart:
      ApplyOn: !If [IsDevelopment, PublishedVersions, None]
    Architectures:
      - !If [ IsDevelopment, x86_64, arm64 ]
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        POWERTOOLS_TRACER_CAPTURE_RESPONSE: false
        POWERTOOLS_TRACER_CAPTURE_ERROR: false
        CONFIG_SERVICE_CACHE_DURATION_MINUTES: !If
          - IsDevelopment
          - 0
          - 3
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue

Parameters:
  Environment:
    Type: String
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  IndividualCiMitStubs:
    Type: String
    Description: |
      Which CIMIT stubs to use in development environment.
      If "True" use individual's CIMIT stubs, if "False" use environment's CIMIT stubs.
    AllowedValues:
      - "False"
      - "True"
    Default: "False"

Conditions:
  AddProvisionedConcurrency: !Not
    - !Equals
      - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
      -  0
  IsDevelopment: !Or
    - !Equals [ !Ref AWS::AccountId, "130355686670"]
    - !Equals [ !Ref AWS::AccountId, "175872367215"]
  IsDev01: !Equals [ !Ref AWS::AccountId, "130355686670"]
  IsDev02: !Equals [ !Ref AWS::AccountId, "175872367215"]
  IsNotDevelopment: !Not [ !Condition IsDevelopment ]
  IsProduction: !Equals [ !Ref Environment, "production"]
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  UseIndividualCiMitStubs: !And
    - !Condition IsDevelopment
    - !Equals [ !Ref IndividualCiMitStubs, "True"]

# The AWS Account Id is used in the following mapping section because we have
# multiple developer environments and it is undesirable to have to keep this
# mapping up to date with each developer environment.
Mappings:
  EnvironmentConfiguration:
    "130355686670": # core dev01
      provisionedConcurrency: 0
      cimitAccountId: 388905755587 # di-ipv-stubs-prod
      cimitEnvironment: production # targeting the "production" CiMit stub
      environment: dev
      criReturnStepFunctionLogLevel: "ALL"
      journeyEngineStepFunctionLogLevel: "ALL"
      pgw500ErrorLimit: 2
      egw500ErrorLimit: 2
      asyncCriResponseQueueArn: "arn:aws:sqs:eu-west-2:616199614141:stubQueue_F2FQueue"
      asyncCriResponseQueueKmsKeyArn: "arn:aws:kms:eu-west-2:616199614141:key/a3025aad-6994-4b72-b3b6-5b361a8b7708"
      # Should be at most 1/6 of the source queue visibility timeout.
      # See https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-queueconfig
      asyncCriLambdaTimeout: 30
    "175872367215": # Core dev02
      provisionedConcurrency: 0
      cimitAccountId: 388905755587 # di-ipv-stubs-prod
      cimitEnvironment: production # targeting the "production" CiMit stub
      environment: dev
      criReturnStepFunctionLogLevel: "ALL"
      journeyEngineStepFunctionLogLevel: "ALL"
      pgw500ErrorLimit: 2
      egw500ErrorLimit: 2
      asyncCriResponseQueueArn: "arn:aws:sqs:eu-west-2:616199614141:stubQueue_F2FQueue"
      asyncCriResponseQueueKmsKeyArn: "arn:aws:kms:eu-west-2:616199614141:key/a3025aad-6994-4b72-b3b6-5b361a8b7708"
      asyncCriLambdaTimeout: 30
    "457601271792": # Build
      provisionedConcurrency: 1
      cimitAccountId: 388905755587 # di-ipv-stubs-prod
      cimitEnvironment: production # targeting the "production" CiMit stub
      environment: build
      criReturnStepFunctionLogLevel: "ALL"
      journeyEngineStepFunctionLogLevel: "ALL"
      pgw500ErrorLimit: 2
      egw500ErrorLimit: 2
      asyncCriResponseQueueArn: "arn:aws:sqs:eu-west-2:616199614141:stubQueue_F2FQueue_build"
      asyncCriResponseQueueKmsKeyArn: "arn:aws:kms:eu-west-2:616199614141:key/a3025aad-6994-4b72-b3b6-5b361a8b7708"
      asyncCriLambdaTimeout: 30
    "335257547869": # Staging
      provisionedConcurrency: 1
      cimitAccountId: 265689800486 # di-ipv-contra-indicators-staging
      cimitEnvironment: staging
      environment: staging
      criReturnStepFunctionLogLevel: "ALL"
      journeyEngineStepFunctionLogLevel: "ALL"
      pgw500ErrorLimit: 2
      egw500ErrorLimit: 2
      asyncCriResponseQueueArn: "arn:aws:sqs:eu-west-2:869230006441:f2f-cri-api-IPVCoreSQSQueue-IE674r63Z764"
      asyncCriResponseQueueKmsKeyArn: "arn:aws:kms:eu-west-2:869230006441:key/09405695-4244-406a-b6bd-17381a49bf27"
      asyncCriLambdaTimeout: 30
    "991138514218": # Integration
      provisionedConcurrency: 1
      cimitAccountId: 697519714716 # di-ipv-contra-indicators-integration
      cimitEnvironment: integration
      environment: integration
      criReturnStepFunctionLogLevel: "OFF"
      journeyEngineStepFunctionLogLevel: "OFF"
      pgw500ErrorLimit: 2
      egw500ErrorLimit: 2
      asyncCriResponseQueueArn: "arn:aws:sqs:eu-west-2:766319219145:f2f-cri-api-IPVCoreSQSQueue-kuAgEry3qYXT"
      asyncCriResponseQueueKmsKeyArn: "arn:aws:kms:eu-west-2:766319219145:key/98b3663f-5f14-495f-9d38-ec7effb69fe5"
      asyncCriLambdaTimeout: 30
    "075701497069": # Production
      provisionedConcurrency: 1
      cimitAccountId: 442136572379 # di-ipv-contra-indicators-prod
      cimitEnvironment: production
      environment: production
      criReturnStepFunctionLogLevel: "OFF"
      journeyEngineStepFunctionLogLevel: "OFF"
      pgw500ErrorLimit: 20
      egw500ErrorLimit: 2
      asyncCriResponseQueueArn: "arn:aws:sqs:eu-west-2:377086294028:f2f-cri-api-IPVCoreSQSQueue-CPbnPGKq0SL7"
      asyncCriResponseQueueKmsKeyArn: "arn:aws:kms:eu-west-2:377086294028:key/db743f51-fe65-43f8-a44e-4a124f8a3ee6"
      asyncCriLambdaTimeout: 30
  SecurityGroups:
    PrefixListIds:
      dynamodb: "pl-b3a742da"
      s3: "pl-7ca54015"

Resources:
  JWKSParamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: AccessJWKSjson
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParametersByPath"
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/deploy/core/outputs/*'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  # ssl cert
  DevSSLCert:
    Type: AWS::CertificateManager::Certificate
    Condition: IsDevelopment
    Properties:
      DomainName: !If
        - IsDev01
        - !Sub "api-${Environment}.01.dev.identity.account.gov.uk"
        - !If [IsDev02, !Sub "api-${Environment}.02.dev.identity.account.gov.uk", !Ref AWS::NoValue]
      DomainValidationOptions:
        - DomainName: !If
            - IsDev01
            - !Sub "api-${Environment}.01.dev.identity.account.gov.uk"
            - !If [IsDev02, !Sub "api-${Environment}.02.dev.identity.account.gov.uk", !Ref AWS::NoValue]
          HostedZoneId: !If
            - IsDev01
            - !ImportValue Dev01IdentityHostedZoneId
            - !If [IsDev02, !ImportValue Dev02IdentityHostedZoneId, DevIdentityHostedZoneId]
      ValidationMethod: DNS

  # dns rcord
  DevDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsDevelopment
    Properties:
      Type: A
      Name: !If
        - IsDev01
        - !Sub "api-${Environment}.01.dev.identity.account.gov.uk"
        - !If [IsDev02, !Sub "api-${Environment}.02.dev.identity.account.gov.uk", !Ref AWS::NoValue]
      HostedZoneId: !If
        - IsDev01
        - !ImportValue Dev01IdentityHostedZoneId
        - !If [IsDev02, !ImportValue Dev02IdentityHostedZoneId, DevIdentityHostedZoneId]
      AliasTarget:
        DNSName: !GetAtt DevApiDomain.RegionalDomainName
        HostedZoneId: !GetAtt DevApiDomain.RegionalHostedZoneId

  # api domain entries / mapping
  DevApiDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: IsDevelopment
    Properties:
      DomainName: !If
        - IsDev01
        - !Sub "api-${Environment}.01.dev.identity.account.gov.uk"
        - !If [IsDev02, !Sub "api-${Environment}.02.dev.identity.account.gov.uk", !Ref AWS::NoValue]
      DomainNameConfigurations:
        - CertificateArn: !Ref DevSSLCert
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  DevApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: IsDevelopment
    Properties:
      DomainName: !If
        - IsDev01
        - !Sub "api-${Environment}.01.dev.identity.account.gov.uk"
        - !If [IsDev02, !Sub "api-${Environment}.02.dev.identity.account.gov.uk", !Ref AWS::NoValue]
      ApiId: !Ref IPVCoreExternalAPI
      Stage: !Ref IPVCoreExternalAPI.Stage
    DependsOn:
      - DevApiDomain

  LambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Core Back Lambda Security Group outbound permissions ruleset
      SecurityGroupEgress:
        - DestinationPrefixListId: !FindInMap [SecurityGroups, PrefixListIds, dynamodb]
          Description: Allow outbound traffic to dynamodb vpc endpoint
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - DestinationPrefixListId: !FindInMap [SecurityGroups, PrefixListIds, s3]
          Description: Allow outbound traffic to s3 vpc endpoint
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - DestinationSecurityGroupId:
            Fn::ImportValue:  !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
          Description: Allow outbound HTTPS traffic to AWS Services vpc endpoint security group
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow outbound HTTPS traffic to Internet - Network Firewall will allow only to CRIs
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow inbound traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  IPVCorePrivateAPI:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
      Name: !Sub IPV Core Private API Gateway ${Environment}
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-ExecuteApiGatewayEndpointId"
      DefinitionBody:
        openapi: "3.0.3" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /foo:
            bar: baz # workaround to get `sam validate` to work
        Fn::Transform:
          Name: "AWS::Include"
          Parameters:
            Location: "../openAPI/core-back-internal.yaml"
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Action: 'execute-api:Invoke'
              Effect: Allow
              Principal: '*'
              Resource:
                - 'execute-api:/*'
            - Action: 'execute-api:Invoke'
              Effect: Deny
              Principal: '*'
              Resource:
                - 'execute-api:/*'
              Condition:
                StringNotEquals:
                  'aws:SourceVpce':
                    Fn::ImportValue: !Sub "${VpcStackName}-ExecuteApiGatewayEndpointId"
      StageName: !Sub ${Environment}
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt IPVCorePrivateAPILogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }

  IPVCorePrivateAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !If
        - IsDevelopment
        - !Sub /aws/vendedlogs/apigateway/${AWS::StackName}-CoreBackPrivate-API-GW-AccessLogs
        - !Sub /aws/apigateway/${AWS::StackName}-CoreBackPrivate-API-GW-AccessLogs
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  IPVCorePrivateAPILogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref IPVCorePrivateAPILogGroup

  IPVCoreExternalAPI:
    Type: AWS::Serverless::Api
    DependsOn:
      - "JWKSParamRole"
    Properties:
      # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
      Name: !Sub IPV Core External API Gateway ${Environment}
      StageName: !Sub ${Environment}
      TracingEnabled: true
      DefinitionBody:
        'Fn::Transform':
          Name: "AWS::Include"
          Parameters:
            Location: "../openAPI/core-back-external.yaml"
      AccessLogSetting:
        DestinationArn: !GetAtt IPVCoreExternalAPILogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }

  IPVCoreExternalAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !If
        - IsDevelopment
        - !Sub /aws/vendedlogs/apigateway/${AWS::StackName}-CoreBackExternal-API-GW-AccessLogs
        - !Sub /aws/apigateway/${AWS::StackName}-CoreBackExternal-API-GW-AccessLogs
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  IPVCoreExternalAPILogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref IPVCoreExternalAPILogGroup

  IssueClientAccessTokenFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "IssueClientAccessTokenFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "issue-client-access-token-${Environment}"
      Handler: uk.gov.di.ipv.core.issueclientaccesstoken.IssueClientAccessTokenHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/issue-client-access-token
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub issue-client-access-token-${Environment}
          CLIENT_AUTH_JWT_IDS_TABLE_NAME: !Ref ClientAuthJwtIdsTable
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ClientAuthJwtIdsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
      Events:
        IPVCoreExternalAPI:
          Type: Api
          Properties:
            RestApiId: !Ref IPVCoreExternalAPI
            Path: /token
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
          - AddProvisionedConcurrency
          - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
          - !Ref AWS::NoValue

  IssueClientAccessTokenFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/issue-client-access-token-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  IssueClientAccessTokenFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref IssueClientAccessTokenFunctionLogGroup

  BuildClientOauthResponseFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "BuildClientOauthResponseFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "build-client-oauth-response-${Environment}"
      Handler: uk.gov.di.ipv.core.buildclientoauthresponse.BuildClientOauthResponseHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/build-client-oauth-response
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub build-client-oauth-response-${Environment}
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
      Events:
        IPVCorePrivateAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: IPVCorePrivateAPI
            Path: /journey/build-client-oauth-response
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  BuildClientOauthResponseFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/build-client-oauth-response-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  BuildClientOauthResponseFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref BuildClientOauthResponseFunctionLogGroup

  InitialiseIpvSessionFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "InitialiseIpvSessionFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "initialise-ipv-session-${Environment}"
      Handler: uk.gov.di.ipv.core.initialiseipvsession.InitialiseIpvSessionHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/initialise-ipv-session
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub initialise-ipv-session-${Environment}
          IPV_SESSIONS_TABLE_NAME: !Select [ 1, !Split [ '/', !GetAtt SessionsTable.Arn ] ]
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: jarKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue CoreEncryptionKeyArn
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
      Events:
        IPVCorePrivateAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: IPVCorePrivateAPI
            Path: /session/initialise
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  InitialiseIpvSessionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/initialise-ipv-session-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  InitialiseIpvSessionFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref InitialiseIpvSessionFunctionLogGroup

  RetrieveCriOauthAccessTokenFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "RetrieveCriOauthAccessTokenFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "retrieve-cri-oauth-access-token-${Environment}"
      Handler: uk.gov.di.ipv.core.retrievecrioauthaccesstoken.RetrieveCriOauthAccessTokenHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/retrieve-cri-oauth-access-token
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Select [ 1, !Split [ '/', !GetAtt UserIssuedCredentialsV2Table.Arn ] ]
          SIGNING_KEY_ID_PARAM: !Sub "/${Environment}/core/self/signingKeyId"
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub retrieve-cri-oauth-access-token-${Environment}
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          CRI_OAUTH_SESSIONS_TABLE_NAME: !Ref CriOAuthSessionsTable
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
          CI_STORAGE_PUT_LAMBDA_ARN: !Sub
            - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:putContraIndicators-${env}"
            - cimit_account_id: !If
                - UseIndividualCiMitStubs
                - !Ref AWS::AccountId
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitAccountId
              env: !If
                - UseIndividualCiMitStubs
                - !Sub ${Environment}
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitEnvironment
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref UserIssuedCredentialsV2Table
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref CriOAuthSessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref CriOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:eu-west-2:*:secret:${Environment}/credential-issuers/*/api-key-*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: kmsSigningKeyPermission
              Effect: Allow
              Action:
                - 'kms:sign'
              Resource:
                - !ImportValue SigningKeyArn
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
            - Sid: invokePutCiFunction
              Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                - !Sub
                  - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:putContraIndicators-${env}"
                  - cimit_account_id: !If
                      - UseIndividualCiMitStubs
                      - !Ref AWS::AccountId
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitAccountId
                    env: !If
                      - UseIndividualCiMitStubs
                      - !Sub ${Environment}
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitEnvironment
      Events:
        IPVCorePrivateAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: IPVCorePrivateAPI
            Path: /journey/cri/access-token
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  RetrieveCriOauthAccessTokenFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/retrieve-cri-oauth-access-token-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  RetrieveCriOauthAccessTokenFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref RetrieveCriOauthAccessTokenFunctionLogGroup

  RetrieveCriCredentialFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "RetrieveCriCredentialFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "retrieve-cri-credential-${Environment}"
      Handler: uk.gov.di.ipv.core.retrievecricredential.RetrieveCriCredentialHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/retrieve-cri-credential
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Select [ 1, !Split [ '/', !GetAtt UserIssuedCredentialsV2Table.Arn ] ]
          CRI_RESPONSE_TABLE_NAME: !Select [ 1, !Split [ '/', !GetAtt CRIResponseTable.Arn ] ]
          SIGNING_KEY_ID_PARAM: !Sub "/${Environment}/core/self/signingKeyId"
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub retrieve-cri-credentials-${Environment}
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          CRI_OAUTH_SESSIONS_TABLE_NAME: !Ref CriOAuthSessionsTable
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
          MITIGATIONS_TABLE_NAME: !Ref MitigationsTable
          CI_STORAGE_PUT_LAMBDA_ARN: !Sub
            - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:putContraIndicators-${env}"
            - cimit_account_id: !If
                - UseIndividualCiMitStubs
                - !Ref AWS::AccountId
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitAccountId
              env: !If
                - UseIndividualCiMitStubs
                - !Sub ${Environment}
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitEnvironment
          CI_STORAGE_POST_MITIGATIONS_LAMBDA_ARN: !Sub
            - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:postMitigations-${env}"
            - cimit_account_id: !If
                - UseIndividualCiMitStubs
                - !Ref AWS::AccountId
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitAccountId
              env: !If
                - UseIndividualCiMitStubs
                - !Sub ${Environment}
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitEnvironment
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref UserIssuedCredentialsV2Table
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIResponseTable
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref CriOAuthSessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MitigationsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:eu-west-2:*:secret:${Environment}/credential-issuers/*/api-key-*
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:eu-west-2:*:secret:/${Environment}/core/self/ci-scoring-config-*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: kmsSigningKeyPermission
              Effect: Allow
              Action:
                - 'kms:sign'
              Resource:
                - !ImportValue SigningKeyArn
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
            - Sid: invokePutCiFunction
              Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                - !Sub
                  - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:putContraIndicators-${env}"
                  - cimit_account_id: !If
                      - UseIndividualCiMitStubs
                      - !Ref AWS::AccountId
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitAccountId
                    env: !If
                      - UseIndividualCiMitStubs
                      - !Sub ${Environment}
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitEnvironment
            - Sid: invokePostCiMitigationFunction
              Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                - !Sub
                  - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:postMitigations-${env}"
                  - cimit_account_id: !If
                      - UseIndividualCiMitStubs
                      - !Ref AWS::AccountId
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitAccountId
                    env: !If
                      - UseIndividualCiMitStubs
                      - !Sub ${Environment}
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitEnvironment
      Events:
        IPVCorePrivateAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: IPVCorePrivateAPI
            Path: /journey/cri/credential
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  RetrieveCriCredentialFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/retrieve-cri-credential-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  RetrieveCriCredentialFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref RetrieveCriCredentialFunctionLogGroup

  BuildCriOauthRequestFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "BuildCriOauthRequestFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "build-cri-oauth-request-${Environment}"
      Handler: uk.gov.di.ipv.core.buildcrioauthrequest.BuildCriOauthRequestHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/build-cri-oauth-request
      MemorySize: 3008
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub build-cri-oauth-request-${Environment}
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Select [ 1, !Split [ '/', !GetAtt UserIssuedCredentialsV2Table.Arn ] ]
          SIGNING_KEY_ID_PARAM: !Sub "/${Environment}/core/self/signingKeyId"
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          CRI_OAUTH_SESSIONS_TABLE_NAME: !Ref CriOAuthSessionsTable
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBReadPolicy:
            TableName: !Ref UserIssuedCredentialsV2Table
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref CriOAuthSessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref CriOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: kmsSigningKeyPermission
              Effect: Allow
              Action:
                - 'kms:sign'
              Resource:
                - !ImportValue SigningKeyArn
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
      Events:
        IPVCorePrivateAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: IPVCorePrivateAPI
            Path: /journey/cri/build-oauth-request/{criId}
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  BuildCriOauthRequestFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/build-cri-oauth-request-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  BuildCriOauthRequestFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref BuildCriOauthRequestFunctionLogGroup

  BuildUserIdentityFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "BuildUserIdentityFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "build-user-identity-${Environment}"
      Handler: uk.gov.di.ipv.core.builduseridentity.BuildUserIdentityHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/build-user-identity
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub build-user-identity-${Environment}
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Select [1, !Split ['/', !GetAtt UserIssuedCredentialsV2Table.Arn]]
          IPV_SESSIONS_TABLE_NAME: !Select [ 1, !Split [ '/', !GetAtt SessionsTable.Arn ] ]
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Select [ 1, !Split [ '/', !GetAtt ClientOAuthSessionsTable.Arn ] ]
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          CIMIT_GET_CONTRAINDICATORS_LAMBDA_ARN: !Sub
            - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:getContraIndicatorCredential-${env}"
            - cimit_account_id: !If
                - UseIndividualCiMitStubs
                - !Ref AWS::AccountId
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitAccountId
              env: !If
                - UseIndividualCiMitStubs
                - !Sub ${Environment}
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitEnvironment
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBReadPolicy:
            TableName: !Ref UserIssuedCredentialsV2Table
        - DynamoDBWritePolicy:
            TableName: !Ref UserIssuedCredentialsV2Table
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
        - Statement:
            - Sid: invokeGetContraIndicatorCredentialFunction
              Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                - !Sub
                  - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:getContraIndicatorCredential-${env}"
                  - cimit_account_id: !If
                      - UseIndividualCiMitStubs
                      - !Ref AWS::AccountId
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitAccountId
                    env: !If
                      - UseIndividualCiMitStubs
                      - !Sub ${Environment}
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitEnvironment
      Events:
        IPVCoreExternalAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: IPVCoreExternalAPI
            Path: /user-identity
            Method: GET
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
          - AddProvisionedConcurrency
          - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
          - !Ref AWS::NoValue

  BuildUserIdentityFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/build-user-identity-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  BuildUserIdentityFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref BuildUserIdentityFunctionLogGroup

  CriReturnStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: criReturnStepFunction.asl.json
      DefinitionSubstitutions:
        IPVProcessJourneyEventFunctionArn: !Ref IPVProcessJourneyEventFunction.Alias
        RetrieveCriCredentialFunctionArn: !Ref RetrieveCriCredentialFunction.Alias
        RetrieveCriOauthAccessTokenFunctionArn: !Ref RetrieveCriOauthAccessTokenFunction.Alias
        ValidateOAuthCallbackFunctionArn: !Ref ValidateOAuthCallbackFunction.Alias
        EvaluateGpg45ScoresFunctionArn: !Ref EvaluateGpg45ScoresFunction.Alias
        CiScoringFunctionArn: !Ref CiScoringFunction.Alias
      Events:
        IPVCorePrivateAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: IPVCorePrivateAPI
            Path: /journey/cri/callback
            Method: POST
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt CriReturnStepFunctionLogGroup.Arn
        IncludeExecutionData: true
        Level: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, criReturnStepFunctionLogLevel ]
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref IPVProcessJourneyEventFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref RetrieveCriCredentialFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref RetrieveCriOauthAccessTokenFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ValidateOAuthCallbackFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref EvaluateGpg45ScoresFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CiScoringFunction
        - Statement:
            - Sid: CloudWatchLogsAccess
              Effect: Allow
              Action:
                - "logs:CreateLogDelivery"
                - "logs:GetLogDelivery"
                - "logs:UpdateLogDelivery"
                - "logs:DeleteLogDelivery"
                - "logs:ListLogDeliveries"
                - "logs:PutLogEvents"
                - "logs:PutResourcePolicy"
                - "logs:DescribeResourcePolicies"
                - "logs:DescribeLogGroups"
              Resource: "*"
      Tracing:
        Enabled: true
      Type: EXPRESS
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  CriReturnStepFunctionApiGateWayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowApiGatewayToInvokeStartSyncExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'states:StartSyncExecution'
                Resource: !Ref CriReturnStepFunction
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  CriReturnStepFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/states/cri-return-step-function-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  CriReturnStepFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref CriReturnStepFunctionLogGroup

  JourneyEngineStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: journeyEngineStepFunction.asl.json
      DefinitionSubstitutions:
        IPVProcessJourneyEventFunctionArn: !Ref IPVProcessJourneyEventFunction.Alias
        CheckExistingIdentityFunctionArn: !Ref CheckExistingIdentityFunction.Alias
        ResetIdentityFunctionArn: !Ref ResetIdentityFunction.Alias
        BuildCriOauthRequestFunctionArn: !Ref BuildCriOauthRequestFunction.Alias
        BuildClientOauthResponseFunctionArn: !Ref BuildClientOauthResponseFunction.Alias
        CiScoringFunctionArn: !Ref CiScoringFunction.Alias
        CheckGpg45ScoreFunctionArn: !Ref CheckGpg45ScoreFunction.Alias
      Events:
        IPVCorePrivateAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: IPVCorePrivateAPI
            Path: /journey/{journeyStep}
            Method: POST
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt JourneyEngineStepFunctionLogGroup.Arn
        IncludeExecutionData: true
        Level: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, journeyEngineStepFunctionLogLevel ]
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref IPVProcessJourneyEventFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckExistingIdentityFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ResetIdentityFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref BuildCriOauthRequestFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref BuildClientOauthResponseFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CiScoringFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckGpg45ScoreFunction
        - Statement:
            - Sid: CloudWatchLogsAccess
              Effect: Allow
              Action:
                - "logs:CreateLogDelivery"
                - "logs:GetLogDelivery"
                - "logs:UpdateLogDelivery"
                - "logs:DeleteLogDelivery"
                - "logs:ListLogDeliveries"
                - "logs:PutLogEvents"
                - "logs:PutResourcePolicy"
                - "logs:DescribeResourcePolicies"
                - "logs:DescribeLogGroups"
              Resource: "*"
      Tracing:
        Enabled: true
      Type: EXPRESS
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  JourneyEngineStepFunctionApiGateWayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowApiGatewayToInvokeStartSyncExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'states:StartSyncExecution'
                Resource: !Ref JourneyEngineStepFunction
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  JourneyEngineStepFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/states/journey-engine-step-function-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  JourneyEngineStepFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref JourneyEngineStepFunctionLogGroup

  IPVProcessJourneyEventFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "IPVProcessJourneyEventFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "process-journey-event-${Environment}"
      Handler: uk.gov.di.ipv.core.processjourneyevent.ProcessJourneyEventHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/process-journey-event
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub process-journey-event-${Environment}
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          CRI_OAUTH_SESSIONS_TABLE_NAME: !Ref CriOAuthSessionsTable
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref CriOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
          - AddProvisionedConcurrency
          - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
          - !Ref AWS::NoValue

  IPVProcessJourneyEventFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/process-journey-event-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  IPVProcessJourneyEventFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref IPVProcessJourneyEventFunctionLogGroup

  EvaluateGpg45ScoresFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - EvaluateGpg45ScoresFunctionLogGroup
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "evaluate-gpg45-scores-${Environment}"
      Handler: uk.gov.di.ipv.core.evaluategpg45scores.EvaluateGpg45ScoresHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/evaluate-gpg45-scores
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub evaluate-gpg45-scores-${Environment}
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Ref UserIssuedCredentialsV2Table
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref UserIssuedCredentialsV2Table
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:eu-west-2:*:secret:/${Environment}/core/self/ci-scoring-config-*
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  EvaluateGpg45ScoresFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/evaluate-gpg45-scores-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  EvaluateGpg45ScoresFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref EvaluateGpg45ScoresFunctionLogGroup

  ValidateOAuthCallbackFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - ValidateOAuthCallbackFunctionLogGroup
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "validate-oauth-callback-${Environment}"
      Handler: uk.gov.di.ipv.core.validateoauthcallback.ValidateOAuthCallbackHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/validate-oauth-callback
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub validate-oauth-callback-${Environment}
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          CRI_OAUTH_SESSIONS_TABLE_NAME: !Ref CriOAuthSessionsTable
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref CriOAuthSessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref CriOAuthSessionsTable
        - DynamoDBWritePolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
      Events:
        IPVCorePrivateAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: IPVCorePrivateAPI
            Path: /journey/cri/validate-callback
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  ValidateOAuthCallbackFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/validate-oauth-callback-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  ValidateOAuthCallbackFunctionFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref ValidateOAuthCallbackFunctionLogGroup

  BuildProvenUserIdentityDetailsFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - BuildProvenUserIdentityDetailsFunctionLogGroup
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "build-proven-user-identity-details-${Environment}"
      Handler: uk.gov.di.ipv.core.buildprovenuseridentitydetails.BuildProvenUserIdentityDetailsHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/build-proven-user-identity-details
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub build-proven-user-identity-details-${Environment}
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Ref UserIssuedCredentialsV2Table
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref UserIssuedCredentialsV2Table
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
      Events:
        IPVCorePrivateAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: IPVCorePrivateAPI
            Path: /journey/build-proven-user-identity-details
            Method: GET
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  BuildProvenUserIdentityDetailsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/build-proven-user-identity-details-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  BuildProvenUserIdentityDetailsFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref BuildProvenUserIdentityDetailsFunctionLogGroup


  CheckExistingIdentityFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - CheckExistingIdentityFunctionLogGroup
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "check-existing-identity-${Environment}"
      Handler: uk.gov.di.ipv.core.checkexistingidentity.CheckExistingIdentityHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/check-existing-identity
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub check-existing-identity-${Environment}
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Ref UserIssuedCredentialsV2Table
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
          CRI_RESPONSE_TABLE_NAME: !Ref CRIResponseTable
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserIssuedCredentialsV2Table
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIResponseTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:eu-west-2:*:secret:/${Environment}/core/self/ci-scoring-config-*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  CheckExistingIdentityFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/check-existing-identity-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  CheckExistingIdentityFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref CheckExistingIdentityFunctionLogGroup


  ResetIdentityFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - ResetIdentityFunctionLogGroup
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "reset-identity-${Environment}"
      Handler: uk.gov.di.ipv.core.resetidentity.ResetIdentityHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/reset-identity
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub reset-identity-${Environment}
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Ref UserIssuedCredentialsV2Table
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
          CRI_RESPONSE_TABLE_NAME: !Ref CRIResponseTable
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserIssuedCredentialsV2Table
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIResponseTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  ResetIdentityFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/reset-identity-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  ResetIdentityFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref ResetIdentityFunctionLogGroup


  ProcessAsyncCriCredentialFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "ProcessAsyncCriCredentialFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "process-async-cri-credential-${Environment}"
      Handler: uk.gov.di.ipv.core.processasynccricredential.ProcessAsyncCriCredentialHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/process-async-cri-credential
      MemorySize: 2048
      Timeout: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, asyncCriLambdaTimeout ]
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Select [ 1, !Split [ '/', !GetAtt UserIssuedCredentialsV2Table.Arn ] ]
          CRI_RESPONSE_TABLE_NAME: !Select [ 1, !Split [ '/', !GetAtt CRIResponseTable.Arn ] ]
          SIGNING_KEY_ID_PARAM: !Sub "/${Environment}/core/self/signingKeyId"
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub process-async-cri-credential-${Environment}
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          MITIGATIONS_TABLE_NAME: !Ref MitigationsTable
          CI_STORAGE_PUT_LAMBDA_ARN: !Sub
            - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:putContraIndicators-${env}"
            - cimit_account_id: !If
                - UseIndividualCiMitStubs
                - !Ref AWS::AccountId
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitAccountId
              env: !If
                - UseIndividualCiMitStubs
                - !Sub ${Environment}
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitEnvironment
          CI_STORAGE_POST_MITIGATIONS_LAMBDA_ARN: !Sub
            - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:postMitigations-${env}"
            - cimit_account_id: !If
                - UseIndividualCiMitStubs
                - !Ref AWS::AccountId
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitAccountId
              env: !If
                - UseIndividualCiMitStubs
                - !Sub ${Environment}
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitEnvironment
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref UserIssuedCredentialsV2Table
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIResponseTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MitigationsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:eu-west-2:*:secret:/${Environment}/core/self/ci-scoring-config-*
        - Statement:
            - Sid: kmsSigningKeyPermission
              Effect: Allow
              Action:
                - 'kms:sign'
              Resource:
                - !ImportValue SigningKeyArn
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
            - Sid: invokePutCiFunction
              Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                - !Sub
                  - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:putContraIndicators-${env}"
                  - cimit_account_id: !If
                      - UseIndividualCiMitStubs
                      - !Ref AWS::AccountId
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitAccountId
                    env: !If
                      - UseIndividualCiMitStubs
                      - !Sub ${Environment}
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitEnvironment
            - Sid: invokePostCiMitigationFunction
              Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                - !Sub
                  - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:postMitigations-${env}"
                  - cimit_account_id: !If
                      - UseIndividualCiMitStubs
                      - !Ref AWS::AccountId
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitAccountId
                    env: !If
                      - UseIndividualCiMitStubs
                      - !Sub ${Environment}
                      - !FindInMap
                        - EnvironmentConfiguration
                        - !Ref AWS::AccountId
                        - cimitEnvironment
            - Sid: asyncCriResponseQueuePermission
              Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ReceiveMessage
              Resource: !If
                - IsDevelopment
                - !Join
                  - ''
                  - - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, asyncCriResponseQueueArn ]
                    - !Sub "_${Environment}"
                - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, asyncCriResponseQueueArn ]
            - Sid: asyncCriResponseQueueKmsKeyPermission
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, asyncCriResponseQueueKmsKeyArn ]
      Events:
        AsyncCriResponse:
          Type: SQS
          Properties:
            Enabled: true
            Queue: !If
              - IsDevelopment
              - !Join
                - ''
                - - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, asyncCriResponseQueueArn ]
                  - !Sub "_${Environment}"
              - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, asyncCriResponseQueueArn ]
            BatchSize: 1
            FunctionResponseTypes:
              - ReportBatchItemFailures
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  ProcessAsyncCriCredentialFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/process-async-cri-credential-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  ProcessAsyncCriCredentialFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref ProcessAsyncCriCredentialFunctionLogGroup

  CiScoringFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - CiScoringFunctionLogGroup
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "ci-scoring-${Environment}"
      Handler: uk.gov.di.ipv.core.ciscoring.CiScoringHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/ci-scoring
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub ci-scoring-${Environment}
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
          MITIGATIONS_TABLE_NAME: !Ref MitigationsTable
          CI_STORAGE_GET_LAMBDA_ARN: !Sub
            - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:getContraIndicators-${env}"
            - cimit_account_id: !If
                - UseIndividualCiMitStubs
                - !Ref AWS::AccountId
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitAccountId
              env: !If
                - UseIndividualCiMitStubs
                - !Sub ${Environment}
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitEnvironment
          CIMIT_GET_CONTRAINDICATORS_LAMBDA_ARN: !Sub
            - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:getContraIndicatorCredential-${env}"
            - cimit_account_id: !If
                - UseIndividualCiMitStubs
                - !Ref AWS::AccountId
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitAccountId
              env: !If
                - UseIndividualCiMitStubs
                - !Sub ${Environment}
                - !FindInMap
                  - EnvironmentConfiguration
                  - !Ref AWS::AccountId
                  - cimitEnvironment
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MitigationsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:eu-west-2:*:secret:/${Environment}/core/self/ci-scoring-config-*
        - Statement:
          - Sid: EnforceStayinSpecificVpc
            Effect: Allow
            Action:
              - 'lambda:CreateFunction'
              - 'lambda:UpdateFunctionConfiguration'
            Resource:
              - "*"
            Condition:
              StringEquals:
                "lambda:VpcIds":
                  - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
          - Sid: invokeGetCiFunction
            Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource:
              - !Sub
                - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:getContraIndicators-${env}"
                - cimit_account_id: !If
                    - UseIndividualCiMitStubs
                    - !Ref AWS::AccountId
                    - !FindInMap
                      - EnvironmentConfiguration
                      - !Ref AWS::AccountId
                      - cimitAccountId
                  env: !If
                    - UseIndividualCiMitStubs
                    - !Sub ${Environment}
                    - !FindInMap
                      - EnvironmentConfiguration
                      - !Ref AWS::AccountId
                      - cimitEnvironment
          - Sid: invokeGetContraIndicatorCredentialFunction
            Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource:
              - !Sub
                - "arn:aws:lambda:eu-west-2:${cimit_account_id}:function:getContraIndicatorCredential-${env}"
                - cimit_account_id: !If
                    - UseIndividualCiMitStubs
                    - !Ref AWS::AccountId
                    - !FindInMap
                      - EnvironmentConfiguration
                      - !Ref AWS::AccountId
                      - cimitAccountId
                  env: !If
                    - UseIndividualCiMitStubs
                    - !Sub ${Environment}
                    - !FindInMap
                      - EnvironmentConfiguration
                      - !Ref AWS::AccountId
                      - cimitEnvironment
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  CiScoringFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/ci-scoring-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  CiScoringFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref CiScoringFunctionLogGroup

  CheckGpg45ScoreFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - CheckGpg45ScoreFunctionLogGroup
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      FunctionName: !Sub "check-gpg45-score-${Environment}"
      Handler: uk.gov.di.ipv.core.checkgpg45score.CheckGpg45ScoreHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      CodeUri: ../lambdas/check-gpg45-score
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          POWERTOOLS_SERVICE_NAME: !Sub check-gpg45-score-${Environment}
          IPV_SESSIONS_TABLE_NAME: !Ref SessionsTable
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Ref UserIssuedCredentialsV2Table
          CLIENT_OAUTH_SESSIONS_TABLE_NAME: !Ref ClientOAuthSessionsTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref UserIssuedCredentialsV2Table
        - DynamoDBReadPolicy:
            TableName: !Ref ClientOAuthSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/*
        - Statement:
          - Sid: EnforceStayinSpecificVpc
            Effect: Allow
            Action:
              - 'lambda:CreateFunction'
              - 'lambda:UpdateFunctionConfiguration'
            Resource:
              - "*"
            Condition:
              StringEquals:
                "lambda:VpcIds":
                  - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, provisionedConcurrency ]
        - !Ref AWS::NoValue

  CheckGpg45ScoreFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/check-gpg45-score-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  CheckGpg45ScoreFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref CheckGpg45ScoreFunctionLogGroup

  UserIssuedCredentialsV2Table:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "user-issued-credentials-v2-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      DeletionProtectionEnabled: !If
        - IsProduction
        - true
        - false
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If
          - IsProduction
          - true
          - false
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "credentialIssuer"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        - AttributeName: "credentialIssuer"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: !If
          - IsProduction
          - true #false set to true until user privacy notice is updated
          - true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  CRIResponseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "cri-response-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "credentialIssuer"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        - AttributeName: "credentialIssuer"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "sessions-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "ipvSessionId"
          AttributeType: "S"
        - AttributeName: "authorizationCode"
          AttributeType: "S"
        - AttributeName: "accessToken"
          AttributeType: "S"
        - AttributeName: "criOAuthSessionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ipvSessionId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "authorizationCode"
          KeySchema:
            - AttributeName: "authorizationCode"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
        - IndexName: "accessToken"
          KeySchema:
            - AttributeName: "accessToken"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
        - IndexName: "criOAuthSessionId"
          KeySchema:
            - AttributeName: "criOAuthSessionId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  ClientOAuthSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "client-oauth-sessions-v2-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "clientOAuthSessionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "clientOAuthSessionId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  ClientAuthJwtIdsTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "client-auth-jwt-ids-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "jwtId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "jwtId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  CriOAuthSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "cri-oauth-sessions-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "criOAuthSessionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "criOAuthSessionId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  MitigationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "mitigations-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      DeletionProtectionEnabled: !If
        - IsProduction
        - true
        - false
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If
          - IsProduction
          - true
          - false
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "contraIndicator"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        - AttributeName: "contraIndicator"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: !If
          - IsProduction
          - true #false set to true until user privacy notice is updated
          - true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  DynamoDBKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: "dynamodb.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              StringEquals:
                "kms:CallerAccount": !Sub "${AWS::AccountId}"
                "kms:ViaService":
                  - "dynamodb.amazonaws.com"
                  - !Sub "lambda.${AWS::Region}.amazonaws.com"

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  CoreApiPrivateGw5xxErrors:
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDevelopment
    Properties:
        AlarmName: PrivateApiGateWay5xxAlarm
        ActionsEnabled: true
        AlarmActions:
          - !ImportValue sns-topics-AlarmTopic
        OKActions:
          - !ImportValue sns-topics-AlarmTopic
        InsufficientDataActions: []
        EvaluationPeriods: 3
        DatapointsToAlarm: 3
        Threshold: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, pgw500ErrorLimit ]
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Metrics:
            - Id: e1
              Label: Sum-of-5xx-Errors
              ReturnData: true
              Expression: SUM(METRICS())
            - Id: m1
              ReturnData: false
              MetricStat:
                  Metric:
                      Namespace: AWS/ApiGateway
                      MetricName: 5XXError
                      Dimensions:
                          - Name: ApiName
                            Value: !Sub IPV Core Private API Gateway ${Environment}
                  Period: 300
                  Stat: Sum

  CoreApiExternalGw5xxErrors:
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDevelopment
    Properties:
      AlarmName: ExternalApiGateWay5xxAlarm
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue sns-topics-AlarmTopic
      OKActions:
        - !ImportValue sns-topics-AlarmTopic
      InsufficientDataActions: []
      EvaluationPeriods: 3
      DatapointsToAlarm: 3
      Threshold: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, egw500ErrorLimit ]
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: Sum-of-5xx-Errors
          ReturnData: true
          Expression: SUM(METRICS())
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: ApiName
                  Value: !Sub IPV Core External API Gateway ${Environment}
            Period: 300
            Stat: Sum

Outputs:
  IPVCorePrivateAPIGatewayID:
    Description: Core Back Private API Gateway ID
    Export:
      Name: !Sub "IPVCorePrivateAPIGatewayID-${Environment}"
    Value: !Ref IPVCorePrivateAPI
  IPVCoreExternalAPIGatewayID:
    Description: Core Back External API Gateway ID
    Export:
      Name: !Sub "IPVCoreExternalAPIGatewayID-${Environment}"
    Value: !Ref IPVCoreExternalAPI
  IPVCoreDynamoDBKmsKey:
    Description: Core Back DynamoDB KMS Key Export with Environment
    Value: !Ref DynamoDBKmsKey
    Export:
      Name: !Sub "CoreBackDynamoDBKmsKey-${Environment}"
  IPVCoreLoggingKmsKey:
    Description: Core Back Logging KMS Key Export with Environment
    Value: !GetAtt LoggingKmsKey.Arn
    Export:
      Name: !Sub "CoreBackLoggingKmsKeyArn-${Environment}"
