openapi: 3.0.3
info:
  title: "IPV Core Internal"
  description: "The internal api presented by IPV Core Back for use by IPV Core Front"
  version: "1.0.0"
paths:
  /request-config:
    get:
      description: "Returns details of all Credential Issuers (CRIs) configured for use with IPV Core"
      responses:
        200:
          description: "A list of cri configurations"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: object
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCredentialIssuerConfig.Arn}:live/invocations
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
  /debug-credential-data:
    get:
      description: "Debug endpoint - only used by core-front debug page to get a list of current retrieved credentials for users journey"
      responses:
        200:
          description: "Map of retrieved cri credentials"
          content:
            application/json:
              schema:
                type: "object"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BuildDebugCredentialDataFunction.Arn}:live/invocations
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
  /session/initialise:
    post:
      description: "Creates a new ipv core-back session"
      responses:
        200:
          description: "The ipv sessionId"
          content:
            application/json:
              schema:
                type: "object"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InitialiseIpvSessionFunction.Arn}:live/invocations
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

  /journey/cri/callback:
    post:
      description: |
        Called when a user comes back to core on the frontend's callback endpoint, after visiting a CRI. Triggers a step
        function that orchestrates lambdas for validating the oauth callback, retrieving the access token, and fetching
        the credential.
      responses:
        200:
          description: "Returns a journey or error response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/journeyType"
      x-amazon-apigateway-integration:
        type: "aws"
        credentials:
          Fn::GetAtt: CriReturnStepFunctionApiGateWayIamRole.Arn
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:states:action/StartSyncExecution
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json:
            Fn::Sub: |
              #set($inputRoot = $input.path('$'))
              {
                "input": "{\"ipvSessionId\": \"$input.params('ipv-session-id')\", \"ipAddress\": \"$input.params('ip-address')\"#foreach($key in $inputRoot.keySet()), \"$key\": \"$inputRoot.get($key)\"#end}",
                "stateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${CriReturnStepFunction.Name}"
              }
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: |
                #set ($bodyObj = $util.parseJson($input.body))

                #if ($bodyObj.status == "SUCCEEDED")
                  #set($lambdaOutputObj = $util.parseJson($bodyObj.output))
                  #set($context.responseOverride.status = $lambdaOutputObj.statusCode)
                  $bodyObj.output

                #elseif ($bodyObj.status == "FAILED")
                  #set($context.responseOverride.status = 500)
                  {
                    "cause": "$bodyObj.cause",
                    "error": "$bodyObj.error"
                  }
                #else
                  #set($context.responseOverride.status = 504)
                  $bodyObj
                #end

  /journey/{journeyStep}:
    post:
      description: Called when the user selects a journey event. Triggers an express step function
      responses:
        200:
          description: "Returns either a redirect journey eventResponse or a page eventResponse "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/journeyType"
      x-amazon-apigateway-integration:
        type: "aws"
        credentials:
          Fn::GetAtt: JourneyEngineStepFunctionApiGateWayIamRole.Arn
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:states:action/StartSyncExecution
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/x-www-form-urlencoded:
            Fn::Sub: |
              {
                "input": "{\"ipvSessionId\": \"$input.params('ipv-session-id')\", \"ipAddress\": \"$input.params('ip-address')\", \"journey\": \"/journey/$input.params('journeyStep')\"}",
                "stateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${JourneyEngineStepFunction.Name}"
              }
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: |
                #set ($bodyObj = $util.parseJson($input.body))

                #if ($bodyObj.status == "SUCCEEDED")
                  #set($lambdaOutput = $util.parseJson($bodyObj.output))
                  #set($context.responseOverride.status = $lambdaOutput.statusCode)
                  $bodyObj.output

                #elseif ($bodyObj.status == "FAILED")
                  #set($context.responseOverride.status = 500)
                  {
                    "cause": "$bodyObj.cause",
                    "error": "$bodyObj.error"
                  }
                #else
                  #set($context.responseOverride.status = 500)
                  $bodyObj
                #end

  /journey/build-client-oauth-response:
    post:
      description: "Called when the user has completed their user journey in IPV Core"
      responses:
        200:
          description: "Authorization Code and details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/journeyType"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BuildClientOauthResponseFunction.Arn}:live/invocations
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
  /journey/end-mitigation-journey/{mitigationId}:
    post:
      description: "Called when the user has completed the last step of a mitigation journey"
      responses:
        200:
          description: "Journey response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/journeyType"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EndMitigationJourneyFunction.Arn}:live/invocations
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

  /journey/build-proven-user-identity-details:
    get:
      description: "Called when core front needs to display information about a users proven identity"
      responses:
        200:
          description: "User identity response"
          content:
            application/json:
              schema:
                type: "object"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BuildProvenUserIdentityDetailsFunction.Arn}:live/invocations
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

components:
  schemas:
    journeyType:
      type: object
      properties:
        page:
          type: string
          description: pageId of page to be displayed
        journey:
          type: string
          description: journeyId of an journey to take
        cri:
          type: object
          description: redirect to a cri (credential issuer)
          required: [ "id", "authorizeUrl", "request" ]
          properties:
            id:
              type: string
            authorizeUrl:
              type: string
            request:
              type: string
        client:
          type: object
          description: redirect to the oauth client, ending the session.
          required: [ "callbackUrl" ]
          properties:
            callbackUrl:
              type: string
      oneOf:
        - required: [ "page" ]
        - required: [ "client" ]
        - required: [ "cri" ]
        - required: [ "journey" ]
