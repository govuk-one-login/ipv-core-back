plugins {
	// Apply the java-library plugin for API and implementation separation.
	id 'java-library'
	id "idea"
	id "jacoco"
}

dependencies {
	api libs.nimbusdsOauth2OidcSdk,
			libs.diVocab
	implementation platform(libs.awsSdkBom),
			platform(libs.openTelemetryBom),
			libs.awsEmbededMetrics,
			libs.awsLambdaJavaEvents,
			libs.awsSdkDynamodb,
			libs.awsSdkDynamodbEnhanced,
			libs.awsSdkKms,
			libs.commonsCodec,
			libs.commonsCollections,
			libs.jacksonDatabind,
			libs.jacksonDataformatYaml,
			libs.openTelemetryJavaHttpClient,
			libs.powertoolsLogging,
			libs.powertoolsParameters,
			libs.powertoolsTracing

	compileOnly libs.lombok
	annotationProcessor libs.lombok

	testImplementation libs.junitJupiter,
			libs.mockitoJunit,
			libs.systemStubs,
			libs.hamcrest

	testRuntimeOnly libs.junitPlatform

	testCompileOnly libs.lombok
	testAnnotationProcessor libs.lombok
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
	withSourcesJar()
}

tasks.withType(Jar).configureEach { Jar jar ->
	jar.preserveFileTimestamps = false
	jar.reproducibleFileOrder = true
}

tasks.named('jar') {
	manifest {
		attributes('Implementation-Title': project.name,
		'Implementation-Version': project.version)
	}
}

test {
	useJUnitPlatform ()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
	}
}

configurations {
	tests.extendsFrom(testImplementation)
}

tasks.register('jarTest', Jar) {
	from sourceSets.test.output
	archiveClassifier.set('tests')
}
artifacts {
	tests jarTest
}
