AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary serverless components for the delete user data lambda.

Parameters:
  Environment:
    Type: String
  VpcStackName:
   Description: >
     The name of the stack that defines the VPC in which this container will
     run.
   Type: String
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  IsNotDevelopment: !Or
    - !Equals [ !Ref Environment, build ]
    - !Equals [ !Ref Environment, staging ]
    - !Equals [ !Ref Environment, integration ]
    - !Equals [ !Ref Environment, production ]
#Mapping for SNS Topic ARN
Mappings:
  DeleteAccountSNSTopic:
    Environment:
      build: "arn:aws:sns:eu-west-2:301577035144:UserAccountDeletion"
      staging: "arn:aws:sns:eu-west-2:539729775994:UserAccountDeletion"
      integration: "arn:aws:sns:eu-west-2:666500506359:UserAccountDeletion"
      production: "arn:aws:sns:eu-west-2:026991849909:UserAccountDeletion"
  DeleteAccountKMSKey:
    Environment:
      build: "arn:aws:kms:eu-west-2:301577035144:key/90536499-8009-4fbd-b559-0127309e40ef"
      staging: "arn:aws:kms:eu-west-2:539729775994:key/d33e9077-8d66-4f63-99a1-f90e29b4aabe"
      integration: "arn:aws:kms:eu-west-2:666500506359:key/c54f60d4-122d-44d8-a5d6-d9e984df9f49"
      production: "arn:aws:kms:eu-west-2:026991849909:key/80c5c2c9-4ff0-4fba-92de-5189957490e9"
  PagerDutyURL:
    Environment:
      build: "https://events.pagerduty.com/integration/c2f863f6f7ad470fc06e652b16c9c4b0/enqueue"
      staging: "https://events.pagerduty.com/integration/c2f863f6f7ad470fc06e652b16c9c4b0/enqueue"
      integration: "https://events.pagerduty.com/integration/c2f863f6f7ad470fc06e652b16c9c4b0/enqueue"
      production: "https://events.pagerduty.com/integration/b222928faf834008c018bc8583245657/enqueue"


Resources:
  LambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Core Back Lambda Security Group outbound permissions ruleset
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow outbound HTTPS traffic to Internet - Network Firewall will allow only to CRIs
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow inbound traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  DeleteUserDataFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - DeleteAccountSNSDLQ
    Properties:
      FunctionName: !Sub "delete-user-data-${Environment}"
      Handler: index.handler
      Runtime: nodejs20.x
      PackageType: Zip
      CodeUri: ../lambdas/delete-user-data/
      Architectures:
        - x86_64
      MemorySize: 512
      Tracing: Active
      Timeout: 10
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          DECRYPTION_KEY: !FindInMap [ DeleteAccountKMSKey, Environment, !Ref Environment]
          IPV_DECRYPTION_KEY: !GetAtt IPVSnsKmsKey.Arn
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Sub user-issued-credentials-v2-${Environment}
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          LOCAL_DYNAMODB_ENDPOINT: http://host.docker.internal:8000

      DeadLetterQueue:
        TargetArn: !GetAtt DeleteAccountLambdaDLQ.Arn
        Type: SQS
      Events:
        IPVSNSEvent:
          Type: SNS
          Properties:
            RedrivePolicy: !Sub "{ \"deadLetterTargetArn\": \"arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:DeleteAccountSNSDLQ\" }"
            SqsSubscription:
              BatchSize: 1
              Enabled: true
              QueueArn: !GetAtt DeleteAccountSQSQueue.Arn
              QueueUrl: !Ref DeleteAccountSQSQueue
            Topic: !GetAtt IPVDeleteAccountSNSTopic.TopicArn

        SNSEvent:
          Type: SNS
          Properties:
            RedrivePolicy: !Sub "{ \"deadLetterTargetArn\": \"arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:DeleteAccountSNSDLQ\" }"
            SqsSubscription:
              BatchSize: 1
              Enabled: true
              QueueArn: !GetAtt IPVDeleteAccountSQSQueue.Arn
              QueueUrl: !Ref IPVDeleteAccountSQSQueue
            Topic: !FindInMap [ DeleteAccountSNSTopic, Environment, !Ref Environment]

        SNSDLQEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DeleteAccountSNSDLQ.Arn
            BatchSize: 1
            Enabled: false
            ScalingConfig:
              MaximumConcurrency: 2

        LambdaDLQEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DeleteAccountLambdaDLQ.Arn
            BatchSize: 1
            Enabled: false
            ScalingConfig:
              MaximumConcurrency: 2

      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId:
              Fn::ImportValue: !Sub "CoreBackDynamoDBKmsKey-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub user-issued-credentials-v2-${Environment}
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: kmsAuditEventQueueEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${Environment}/core/self/componentId
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: true
        Minify: true
        Target: "node20"
        Sourcemap: true  # Required to preserve error stack traces to TS source
        EntryPoints:
          - src/index.ts

  DeleteUserDataFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/delete-user-data-${Environment}"
      KmsKeyId:
        Fn::ImportValue: !Sub "CoreBackLoggingKmsKeyArn-${Environment}"

  DeleteUserDataFunctionSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref DeleteUserDataFunctionLogGroup

#IPV delete account topic
  IPVDeleteAccountSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: IPVUserAccountDeletionTopic
      KmsMasterKeyId: !Ref IPVSnsKmsKey
      TopicName: !Sub IPVDeleteAccountSNSTopic-${Environment}

#Key for IPV SNS Topic
  IPVSnsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource:
              - "*"
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: kms:*
            Resource:
              - "*"
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: kms:*
            Resource:
              - "*"

  IPVSnsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/IPVCoreDeleteUserSNSTopicKey
      TargetKeyId: !Ref IPVSnsKmsKey

#Delete Account Queue
  DeleteAccountSQSQueue:
    DependsOn: DeleteAccountSNSDLQ
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      QueueName: DeleteAccountSQSQueue
      RedrivePolicy: !Sub "{ \"deadLetterTargetArn\": \"arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:DeleteAccountSNSDLQ\", \"maxReceiveCount\": \"5\" }"

#Delete Account Queue alarm for old messages
  DeleteAccountSQSMessagesNotConsumedAlarm:
    Condition: IsNotDevelopment
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-DeleteAccountSQSMessagesNotConsumedAlarm"
      AlarmDescription: "Trigger an alarm when the age of the oldest message in the DeleteAccountSQSQueue is 5 or more minutes"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue alarm-alerts-topic
      OKActions:
        - !ImportValue alarm-alerts-topic
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Statistic: Maximum
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeleteAccountSQSQueue.QueueName
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 300
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

#IPV Delete Account Queue
  IPVDeleteAccountSQSQueue:
    DependsOn: DeleteAccountSNSDLQ
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      QueueName: IPVDeleteAccountSQSQueue
      RedrivePolicy: !Sub "{ \"deadLetterTargetArn\": \"arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:DeleteAccountSNSDLQ\", \"maxReceiveCount\": \"5\" }"

#IPV Delete Account Queue alarm for old messages
  IPVDeleteAccountSQSMessagesNotConsumedAlarm:
    Condition: IsNotDevelopment
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-IPVDeleteAccountSQSMessagesNotConsumedAlarm"
      AlarmDescription: "Trigger an alarm when the age of the oldest message in the IPVDeleteAccountSQSQueue is 5 or more minutes"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue alarm-alerts-topic
      OKActions:
        - !ImportValue alarm-alerts-topic
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Statistic: Maximum
      Dimensions:
        - Name: QueueName
          Value: !GetAtt IPVDeleteAccountSQSQueue.QueueName
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 300
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

#DLQ for SNS Subsciption
  DeleteAccountSNSDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: DeleteAccountSNSDLQ
      RedriveAllowPolicy:
        redrivePermission: allowAll

#SNSDLQ Policy
  DeleteAccountSNSDLQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref DeleteAccountSNSDLQ
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Action:
              - SQS:SendMessage
              - SQS:ReceiveMessage
            Resource: !GetAtt DeleteAccountSNSDLQ.Arn
            Principal:
              Service: sns.amazonaws.com

#DLQ for Lambda
  DeleteAccountLambdaDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: DeleteAccountLambdaDLQ

#Policy for Lambda DLQ
  DeleteAccountLambdaDLQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref DeleteAccountLambdaDLQ
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - SQS:SendMessage
              - SQS:ReceiveMessage
            Resource: !GetAtt DeleteAccountLambdaDLQ.Arn
            Principal:
              Service: sns.amazonaws.com

#Alarm for DLQ
  DeleteAccountSNSDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref DLQAlarmsSNSTopic
      OKActions:
        - !Ref DLQAlarmsSNSTopic
      AlarmDescription: "Delete Account SNS Topic Dead Letter Queue Alarm"
      AlarmName: !Join
        - "-"
        - - !Ref AWS::StackName
          - "DeleteAccountSNSDLQAlarm"
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeleteAccountSNSDLQ.QueueName
      MetricName: ApproximateNumberOfMessagesVisible
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Period: 60
      EvaluationPeriods: 1
      Statistic: Sum
      TreatMissingData: notBreaching

#Alarm for other DLQ
  DeleteAccountLambdaDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref DLQAlarmsSNSTopic
      OKActions:
        - !Ref DLQAlarmsSNSTopic
      AlarmDescription: "Delete Account SNS Topic Dead Letter Queue Alarm"
      AlarmName: !Join
        - "-"
        - - !Ref AWS::StackName
          - "DeleteAccountLambdaDLQAlarm"
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeleteAccountLambdaDLQ.QueueName
      MetricName: ApproximateNumberOfMessagesVisible
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Period: 60
      EvaluationPeriods: 1
      Statistic: Sum
      TreatMissingData: notBreaching

# SNS Topic for DLQ Alarms
  DLQAlarmsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join
        - "-"
        - - !Ref AWS::StackName
          - "DLQAlarmsSNSTopic"
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      Subscription:
        - Endpoint: patrick.blakey@digital.cabinet-office.gov.uk
          Protocol: email
        - Endpoint: joe.edwards@digital.cabinet-office.gov.uk
          Protocol: email
        - Endpoint: vam.hedayati@digital.cabinet-office.gov.uk
          Protocol: email
        - Endpoint: !FindInMap [ PagerDutyURL, Environment, !Ref Environment]
          Protocol: https

Outputs:
  IPVCoreSNSKey:
    Description: IPVCoreDeleteUserSNSTopicKeyArn
    Value: !GetAtt IPVSnsKmsKey.Arn
    Export:
      Name: !Sub "IPVCoreDeleteUserSNSTopicKeyArn-${Environment}"
