AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary serverless components for the delete user data lambda.

Parameters:
  Environment:
    Type: String
  VpcStackName:
   Description: >
     The name of the stack that defines the VPC in which this container will
     run.
   Type: String
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

Conditions:
  IsBuild: !Not
    - !Or
      - !Equals [ !Ref Environment, "dev" ]
      - !Equals [ !Ref Environment, "staging" ]
      - !Equals [ !Ref Environment, "integration" ]
      - !Equals [ !Ref Environment, "production" ]
#  IsNotDevelopment: !Not [ !Condition IsBuild ]
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

#Mapping for SNS Topic ARN
Mappings:
  DeleteAccountSNSTopic:
    Environment:
      build: "" #this will always be blank
      staging: "" #arn to be provided by auth
      integration: "" #arn to be provided by auth
      production: "" #arn to be provided by auth

Resources:
  LambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Core Back Lambda Security Group outbound permissions ruleset
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow outbound HTTPS traffic to Internet - Network Firewall will allow only to CRIs
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow inbound traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  DeleteUserDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "delete-user-data-${Environment}"
      Handler: index.handler
      Runtime: nodejs18.x
      PackageType: Zip
      CodeUri: ../lambdas/delete-user-data/
      Architectures:
        - x86_64
      MemorySize: 512
      Tracing: Active
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          USER_ISSUED_CREDENTIALS_TABLE_NAME: !Sub user-issued-credentials-v2-${Environment}
      DeadLetterQueue:
        TargetArn: !GetAtt DeleteAccountLambdaDLQ.Arn
        Type: SQS
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            RedrivePolicy: !Sub "{ \"deadLetterTargetArn\": \"arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:DeleteAccountSNSDLQ\" }"
            SqsSubscription: true
            Topic:
              !If
              - IsBuild
              - !GetAtt BuildOnlyDeleteAccountSNSTopic.TopicArn
              - !FindInMap
                - DeleteAccountSNSTopic
                - Environment
                - !Ref Environment

      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - KMSDecryptPolicy:
            KeyId: !ImportValue DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Sub user-issued-credentials-v2-${Environment}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: true
        Minify: true
        Target: "node18"
        Sourcemap: true  # Required to preserve error stack traces to TS source
        EntryPoints:
          - src/index.ts

##SNS Subscription
#  DeleteAccountSNSSubscription:
#    Type: AWS::SNS::Subscription
#    Properties:
#      #DeliveryPolicy:
#      Endpoint: !GetAtt DeleteUserDataFunction.Arn
#      Protocol: lambda
#      RedrivePolicy: !Sub "{ \"deadLetterTargetArn\": \"arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:DeleteAccountSNSDLQ\" }"
#
#      TopicArn:
#        !If
#        - IsBuild
#        - !GetAtt BuildOnlyDeleteAccountSNSTopic.TopicArn
#        - !FindInMap
#          - DeleteAccountSNSTopic
#          - Environment
#          - !Ref Environment

#Build only SNS Topic
  BuildOnlyDeleteAccountSNSTopic:
    Condition: IsBuild
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub BuildOnlyDeleteAccountSNSTopic-${Environment}

#DLQ for SNS Subsciption
  DeleteAccountSNSDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: DeleteAccountSNSDLQ
      RedriveAllowPolicy:
        redrivePermission: allowAll

#SNSDLQ Policy
  DeleteAccountSNSDLQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref DeleteAccountSNSDLQ
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Action:
              - SQS:SendMessage
              - SQS:ReceiveMessage
            Resource: !GetAtt DeleteAccountSNSDLQ.Arn
            Principal:
              Service: sns.amazonaws.com

#DLQ for Lambda
  DeleteAccountLambdaDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: DeleteAccountLambdaDLQ

#Policy for Lambda DLQ
  DeleteAccountLambdaDLQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref DeleteAccountLambdaDLQ
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - SQS:SendMessage
              - SQS:ReceiveMessage
            Resource: !GetAtt DeleteAccountLambdaDLQ.Arn
            Principal:
              Service: sns.amazonaws.com

#Alarm for DLQ
  DeleteAccountSNSDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
         - !Ref DLQAlarmsSNSTopic
      AlarmDescription: "Delete Account SNS Topic Dead Letter Queue Alarm"
      AlarmName: !Join
        - "-"
        - - !Ref AWS::StackName
          - "DeleteAccountSNSDLQAlarm"
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: Sum-of-SQS-DQL-Messages
          ReturnData: true
          Expression: SUM(METRICS())
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/SQS
              MetricName: NumberOfMessagesReceived
              Dimensions:
                - Name: QueueName
                  Value: !GetAtt DeleteAccountSNSDLQ.QueueName
            Period: 300
            Stat: Sum

#Alarm for other DLQ
  DeleteAccountLambdaDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
       - !Ref DLQAlarmsSNSTopic
      AlarmDescription: "Delete Account SNS Topic Dead Letter Queue Alarm"
      AlarmName: !Join
        - "-"
        - - !Ref AWS::StackName
          - "DeleteAccountLambdaDLQAlarm"
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: Sum-of-SQS-DQL-Messages
          ReturnData: true
          Expression: SUM(METRICS())
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/SQS
              MetricName: NumberOfMessagesReceived
              Dimensions:
                - Name: QueueName
                  Value: !GetAtt DeleteAccountLambdaDLQ.QueueName
            Period: 300
            Stat: Sum

# SNS Topic for DLQ Alarms
  DLQAlarmsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join
        - "-"
        - - !Ref AWS::StackName
          - "DLQAlarmsSNSTopic"
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      Subscription:
        - Endpoint: tobias.saunders@digital.cabinet-office.gov.uk
          Protocol: email
        - Endpoint: kerr.rainey@digital.cabinet-office.gov.uk
          Protocol: email
        - Endpoint: vam.hedayati@digital.cabinet-office.gov.uk
          Protocol: email

  #A way to replay the DQLs
